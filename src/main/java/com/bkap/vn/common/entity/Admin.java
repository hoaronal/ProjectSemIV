package com.bkap.vn.common.entity;
// Generated Dec 6, 2017 9:49:55 PM by Hibernate Tools 4.3.1


import org.springframework.format.annotation.DateTimeFormat;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Admin generated by hbm2java
 */
@Entity
@Table(name = "admin"
        , schema = "dbo"
        , catalog = "shop_online"
)
public class Admin implements java.io.Serializable {


    private int id;
    private String account;
    private String password;
    private String email;
    private String phone;
    private Date birthday;
    private String address;
    private Integer adminCreate;
    private Integer adminUpdate;
    private Date createDate;
    private Date updateDate;
    private byte activeStatus;
    private byte status;
    private Set<Users> usersesForAdminCreate = new HashSet<Users>(0);
    private Set<Product> productsForAdminCreate = new HashSet<Product>(0);
    private Set<Users> usersesForAdminUpdate = new HashSet<Users>(0);
    private Set<Order> ordersForAdminUpdate = new HashSet<Order>(0);
    private Set<News> newsesForAdminCreate = new HashSet<News>(0);
    private Set<HistoryAction> historyActions = new HashSet<HistoryAction>(0);
    private Set<Product> productsForAdminUpdate = new HashSet<Product>(0);
    private Set<Category> categoriesForAdminUpdate = new HashSet<Category>(0);
    private Set<Province> provincesForAdminUpdate = new HashSet<Province>(0);
    private Set<News> newsesForAdminUpdate = new HashSet<News>(0);
    private Set<Transaction> transactionsForAdminCreate = new HashSet<Transaction>(0);
    private Set<Transaction> transactionsForAdminUpdate = new HashSet<Transaction>(0);
    private Set<Order> ordersForAdminCreate = new HashSet<Order>(0);
    private Set<Category> categoriesForAdminCreate = new HashSet<Category>(0);
    private Set<Province> provincesForAdminCreate = new HashSet<Province>(0);

    public Admin() {
    }


    public Admin(int id, String account, String password, String email, byte activeStatus, byte status) {
        this.id = id;
        this.account = account;
        this.password = password;
        this.email = email;
        this.activeStatus = activeStatus;
        this.status = status;
    }

    public Admin(int id, String account, String password, String email, String phone, Date birthday, String address, Integer adminCreate, Integer adminUpdate, Date createDate, Date updateDate, byte activeStatus, byte status, Set<Users> usersesForAdminCreate, Set<Product> productsForAdminCreate, Set<Users> usersesForAdminUpdate, Set<Order> ordersForAdminUpdate, Set<News> newsesForAdminCreate, Set<HistoryAction> historyActions, Set<Product> productsForAdminUpdate,   Set<Category> categoriesForAdminUpdate, Set<Province> provincesForAdminUpdate, Set<News> newsesForAdminUpdate, Set<Transaction> transactionsForAdminCreate, Set<Transaction> transactionsForAdminUpdate, Set<Order> ordersForAdminCreate, Set<Role> rolesForAdminUpdate, Set<Category> categoriesForAdminCreate, Set<Province> provincesForAdminCreate) {
        this.id = id;
        this.account = account;
        this.password = password;
        this.email = email;
        this.phone = phone;
        this.birthday = birthday;
        this.address = address;
        this.adminCreate = adminCreate;
        this.adminUpdate = adminUpdate;
        this.createDate = createDate;
        this.updateDate = updateDate;
        this.activeStatus = activeStatus;
        this.status = status;
        this.usersesForAdminCreate = usersesForAdminCreate;
        this.productsForAdminCreate = productsForAdminCreate;
        this.usersesForAdminUpdate = usersesForAdminUpdate;
        this.ordersForAdminUpdate = ordersForAdminUpdate;
        this.newsesForAdminCreate = newsesForAdminCreate;
        this.historyActions = historyActions;
        this.productsForAdminUpdate = productsForAdminUpdate;
        this.categoriesForAdminUpdate = categoriesForAdminUpdate;
        this.provincesForAdminUpdate = provincesForAdminUpdate;
        this.newsesForAdminUpdate = newsesForAdminUpdate;
        this.transactionsForAdminCreate = transactionsForAdminCreate;
        this.transactionsForAdminUpdate = transactionsForAdminUpdate;
        this.ordersForAdminCreate = ordersForAdminCreate;
        this.categoriesForAdminCreate = categoriesForAdminCreate;
        this.provincesForAdminCreate = provincesForAdminCreate;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }


    @Column(name = "account", nullable = false)
    public String getAccount() {
        return this.account;
    }

    public void setAccount(String account) {
        this.account = account;
    }


    @Column(name = "password", nullable = false)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }


    @Column(name = "email", nullable = false)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }


    @Column(name = "phone")
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Temporal(TemporalType.DATE)
    @DateTimeFormat(pattern = "dd/MM/yyyy")
    @Column(name = "birthday", length = 23)
    public Date getBirthday() {
        return this.birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }


    @Column(name = "address")
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }


    @Column(name = "admin_create")
    public Integer getAdminCreate() {
        return this.adminCreate;
    }

    public void setAdminCreate(Integer adminCreate) {
        this.adminCreate = adminCreate;
    }


    @Column(name = "admin_update")
    public Integer getAdminUpdate() {
        return this.adminUpdate;
    }

    public void setAdminUpdate(Integer adminUpdate) {
        this.adminUpdate = adminUpdate;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "create_date", length = 23)
    public Date getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "update_date", length = 23)
    public Date getUpdateDate() {
        return this.updateDate;
    }

    public void setUpdateDate(Date updateDate) {
        this.updateDate = updateDate;
    }


    @Column(name = "active_status", nullable = false)
    public byte getActiveStatus() {
        return this.activeStatus;
    }

    public void setActiveStatus(byte activeStatus) {
        this.activeStatus = activeStatus;
    }


    @Column(name = "status", nullable = false)
    public byte getStatus() {
        return this.status;
    }

    public void setStatus(byte status) {
        this.status = status;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminCreate")
    public Set<Users> getUsersesForAdminCreate() {
        return this.usersesForAdminCreate;
    }

    public void setUsersesForAdminCreate(Set<Users> usersesForAdminCreate) {
        this.usersesForAdminCreate = usersesForAdminCreate;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminCreate")
    public Set<Product> getProductsForAdminCreate() {
        return this.productsForAdminCreate;
    }

    public void setProductsForAdminCreate(Set<Product> productsForAdminCreate) {
        this.productsForAdminCreate = productsForAdminCreate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminUpdate")
    public Set<Users> getUsersesForAdminUpdate() {
        return this.usersesForAdminUpdate;
    }

    public void setUsersesForAdminUpdate(Set<Users> usersesForAdminUpdate) {
        this.usersesForAdminUpdate = usersesForAdminUpdate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminUpdate")
    public Set<Order> getOrdersForAdminUpdate() {
        return this.ordersForAdminUpdate;
    }

    public void setOrdersForAdminUpdate(Set<Order> ordersForAdminUpdate) {
        this.ordersForAdminUpdate = ordersForAdminUpdate;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminCreate")
    public Set<News> getNewsesForAdminCreate() {
        return this.newsesForAdminCreate;
    }

    public void setNewsesForAdminCreate(Set<News> newsesForAdminCreate) {
        this.newsesForAdminCreate = newsesForAdminCreate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "admin")
    public Set<HistoryAction> getHistoryActions() {
        return this.historyActions;
    }

    public void setHistoryActions(Set<HistoryAction> historyActions) {
        this.historyActions = historyActions;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminUpdate")
    public Set<Product> getProductsForAdminUpdate() {
        return this.productsForAdminUpdate;
    }

    public void setProductsForAdminUpdate(Set<Product> productsForAdminUpdate) {
        this.productsForAdminUpdate = productsForAdminUpdate;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminUpdate")
    public Set<Category> getCategoriesForAdminUpdate() {
        return this.categoriesForAdminUpdate;
    }

    public void setCategoriesForAdminUpdate(Set<Category> categoriesForAdminUpdate) {
        this.categoriesForAdminUpdate = categoriesForAdminUpdate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminUpdate")
    public Set<Province> getProvincesForAdminUpdate() {
        return this.provincesForAdminUpdate;
    }

    public void setProvincesForAdminUpdate(Set<Province> provincesForAdminUpdate) {
        this.provincesForAdminUpdate = provincesForAdminUpdate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminUpdate")
    public Set<News> getNewsesForAdminUpdate() {
        return this.newsesForAdminUpdate;
    }

    public void setNewsesForAdminUpdate(Set<News> newsesForAdminUpdate) {
        this.newsesForAdminUpdate = newsesForAdminUpdate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminCreate")
    public Set<Transaction> getTransactionsForAdminCreate() {
        return this.transactionsForAdminCreate;
    }

    public void setTransactionsForAdminCreate(Set<Transaction> transactionsForAdminCreate) {
        this.transactionsForAdminCreate = transactionsForAdminCreate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminUpdate")
    public Set<Transaction> getTransactionsForAdminUpdate() {
        return this.transactionsForAdminUpdate;
    }

    public void setTransactionsForAdminUpdate(Set<Transaction> transactionsForAdminUpdate) {
        this.transactionsForAdminUpdate = transactionsForAdminUpdate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminCreate")
    public Set<Order> getOrdersForAdminCreate() {
        return this.ordersForAdminCreate;
    }

    public void setOrdersForAdminCreate(Set<Order> ordersForAdminCreate) {
        this.ordersForAdminCreate = ordersForAdminCreate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminCreate")
    public Set<Category> getCategoriesForAdminCreate() {
        return this.categoriesForAdminCreate;
    }

    public void setCategoriesForAdminCreate(Set<Category> categoriesForAdminCreate) {
        this.categoriesForAdminCreate = categoriesForAdminCreate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "adminByAdminCreate")
    public Set<Province> getProvincesForAdminCreate() {
        return this.provincesForAdminCreate;
    }

    public void setProvincesForAdminCreate(Set<Province> provincesForAdminCreate) {
        this.provincesForAdminCreate = provincesForAdminCreate;
    }

}


